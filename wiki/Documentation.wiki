#summary How Foom Works...
#labels Featured,Phase-Implementation

= Foom =

Foom is a dynamically typed, lazily interpreted language.  Most statement are terminated with a `;` with the exception of `for` and `if`/`else`.

== Datatypes ==

There are five basic types in Foom:
  * `int` -- integer, internally a double
  * `str` -- strings surrounded by `"` interpolate standard sprintf slash codes. `'` strings do not.
  * `list` -- an array list --  a bare list is contained in `[]`
  * `func` -- function type -- a raw function is contained in a `{}` block
  * `obj` -- base object

== Variables ==
Variables are declared with a primary data type as such:
{{{
str s;
int i = 10;
list l = [2, i, 39];
func f;
f = { args[1]; };
}}}
Currently, one declaration per statement.

== Comments ==
Currently nonexistent.  Planning on # to ignore rest of line. Maybe ## for blocks.

== Functions ==
Functions are declared using the `func` keyword, setting the variable to a block.  The block is only evaluated when the function is called so using the variable name in recursive function will behave as expected.  Arguments to the function are passed in as list called `args`.  All variables are currently passed by reference.  The last statement in a function is the function's return value.  Functions are assignment statements thus must end with a `;`.
(Per [http://code.google.com/p/foom/issues/detail?id=1 Bug 1], all functions require arguments.)

The following function takes three arguments: a list L, integer A, and interger B.  It swaps position A in list L with position B and returns L at the end.
{{{
func swap = {
  list l = args[0];
  int t = l[args[1]];
  l[args[1]] = l[args[2]];
  l[args[2]] = t;
  l;
};
}}}

== Libraries ==
Currently, only one library exists and it is imported automatically.

=== sys ===
sys has two fuctions:
  * `sys.print()` -- prints argument
  * `sys.println()` -- prints argument followed by a newline