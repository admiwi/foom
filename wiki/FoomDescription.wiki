#summary What is foom?
#labels Featured,Phase-Design

foom will be a lightweight, general purpose scripting language that is similar enough to C and Java that it should be fairly easy to learn.

foom may end up having the following features:
  * dynamic language
  * C-like syntax
  * optional typing
  * first-class functions
  * everything is an object
  * closures
  * continuations
  * mixins
  * currying
  * list comprehensions
  * data types
    * [objectType object] obj
      * [integerType  integer] int
      * [decimalType decimal] dec
      * [stringType string] str (multibyte?)
      * [binaryType binary] bin (like a c-string, but safer)
        * [structType struct]
        * [unionType union]
      * [functionType func] {}
      * [listType list] []
      * [mapType map] [:]
      * [tupleType tup] <>  # mebbe... thinking about it

{{{
  obj o
  assert o.class == obj  #
  assert o is obj
  assert o.class.name == 'obj'

  int a = 12
  assert a is int
  assert a was obj

  dec b = 12.0
  assert b is dec

  str c = "12"
  assert c is str

  assert a as str == "12"
  
  str d = '12'
  assert d is str
  
  list e = [12, 12]
  assert e is list
  assert e[0] == 12
  assert e.count == 2
  assert e.keys == [0,1]
  assert ![]

  map f = [o: 12]
  assert f is map
  assert f.keys == [o]

  assert {} is func
  func g = { 12 }
  assert g is func
  assert g() == 12
  assert g.call() == 12

  func h(){ 12 }
  assert h is func
  assert h() == 12

  func i(j){ j as str }
  assert i(12) == "12"
  assert i 12 == "12"

  assert int k == new Int()
  
}}}

==Functions:==
Defining a function is done in two different ways:  traditional C like fashion.  Arguments may be defined explicitly or access through the local variable `args`.  Explicit arguments must be typed, but may use the `obj` base object for duck typing.  Functions returning a value must do so explicitly using the `return` statement.
{{{
  func f(int a){
    return a + 2
  }